/*
TYPOGRAPHY

Font sizes (px)
10 / 12 / 14 / 16(default) / 18 / 20 / 24 / 30 / 36 / 44 / 52 / 62 / 74 / 86 / 98

Font weights
400(default)

Line height
1(default)
*/

/*
SPACING
2 / 4 / 8 / 12 / 16 / 24 / 32 / 48 / 64 / 80 / 96 / 128 
*/

/*
COLOR - always choose a primary color
and then generate its tints(lighter version of primaray color)
and shades(darker version of primary color)
and always keeps grey color

https://maketintsandshades.com/ - to generate tints and shades

Primary - #e67e22
tints - 
shades
*/

/* This is a universal selection
and this has the least priority
It can be used to select any and all types of elements in an HTML page. 
This selector is useful when we want to select all the elements on the page
*/
* {
  /* We want to set intial padding and margin as 0 for all element
  so that we don't have some intial padding and margin
  because we are in universal selector, we can change this padding and margin 
  since universal selector has the least priority
  */
  padding: 0;
  margin: 0;

  /* Without border-box
  width + padding + border = actual width
  height + padding + border = actual height
  this means when we set a element's width, it will appear wider than the width
  because padding and border gets added in the width that we provide

  With border-box
  actual width = width that we provide
  this means if padding = 10 and we provide width as 50
  then total width = 50(10 padding + 40 width)
  */
  box-sizing: border-box;
}

/* html tag is the outermost tag
so it will include all tags
*/
html {
  /* concept of rem
  rem is a unit just like px or em
  but it is a computed unit related to px
  generally for a browser -> 1rem = default browser font size = 16px
  and we can change this font-size
  now if we give all elements rem unit(padding, margin, text size etc. all are in rem) and we change font-size
  then all elements's sizes gets change because all have rem unit and rem is calculated based on font-size
  and if we change font-size then element's size also gets changed
  this make the consistency between element because if user changes the font-size then all element's size should be changed
  a type of responsiveness is here
  */
  font-size: 62.5%; /* here 62.5% = 10px -> 1rem = 10px*/
}

/* just to have consistency between elements */
body {
  /* always put more than one fonts, so that if user doesn't have one font then he can still have other
  and always put a font which is installed in most browsers like sans-serif so that user can see the text
  */
  font-family: "Rubik", sans-serif;
  line-height: 1;
  font-weight: 400;
  color: #555;
}

.header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  background-color: #fdf2e9;

  height: 9.6rem;
  padding: 0 4.8rem;
}

.logo {
  height: 2.2rem;
}

.main-nav-list {
  display: flex;
  gap: 3.2rem;
  list-style: none;
}

.main-nav-link:link,
.main-nav-link:visited {
  text-decoration: none;
  font-size: 1.8rem;
  font-weight: 500;
  color: #333;
  transition: all 0.5s;
}

.main-nav-link:hover,
.main-nav-link:active {
  color: #cf711f;
}

.section-hero {
  background-color: #fdf2e9;
  padding: 9.6rem 0;
}

.hero {
  /* if we have used width instead of max-width
  then when we minimize browser width, we would have a horizontal scrollbar
  but we don't want that because that's un-responsive

  with max-width, our content gets smaller width as we decrease browser's width
  that's makes our content responsive
  */
  max-width: 130rem;
  margin: auto; /* center an element - give some width and set margin to auto */
  padding: 0 4.8rem;
  /* Grid
  flex is 1D, grid is 2D

  we can define number of columns or rows
  for example - lets say we define 2 columns and we have 8 elements
  then we will have 4 rows
  */
  display: grid;
  /* to define number of columns - 1fr = 1 fraction
  here we've defined 2 columns as 1fr means both would get same column width
  one column width = container width / 2

  we could've also defined this width in px or some other unit but fr makes it responsive
  */
  grid-template-columns: 1fr 1fr;
  /* same as flex's align-items to center items vertically */
  align-items: center;
  /* its create the padding between the columns and rows both
  if we want gap between columns only -> column-gap
  if we want gap between rows only -> row-gap

  we've this in flex also, there is creates gap between columns only
  */
  gap: 9.6rem;
}

/* How to style iamges so that their aspect ratio remain original and they are little bit responsive

1. don't give width and height to the images - set only width or height
the other one gets automatically adjusted with respect to their original aspect ratio

2. give width or height in percentage so that they always take percentage of parent's dimension
*/
.hero-img {
  width: 100%;
}

.heading-primary {
  font-size: 6.2rem; /* 62px */
  /* thickness of the text */
  font-weight: 700;
  /* height of the text */
  line-height: 1.05;
  /* spacing between letters */
  letter-spacing: -0.5px; /* generally spacing in headings are very less */
  color: #333;
  margin-bottom: 3.2rem;
}

.hero-description {
  font-size: 2rem;
  line-height: 1.6;
  margin-bottom: 4.8rem;
}

.hero-links {
  margin-bottom: 6.2rem;
}

.btn:link, /* when the link is not visited*/
.btn:visited {
  /* when the link is visited*/
  /* we want the same style for unvisited and visited links */

  /* difference between block, inline, inline-block display
  1. BLOCK means it will have separate line and we can set width and height
  2. INLINE means in the line so it won't have in some separate line, ex: span, anchor tag
     and width, height and margin(top and bottom only) won't be applied on these
  3. INLINE-BLOCK means it will be in the line and width and height will be applied on these

  live ex: https://www.w3schools.com/css/tryit.asp?filename=trycss_inline-block_span1
  */
  display: inline-block;
  text-decoration: none; /* for underline, we don't want underline*/
  font-size: 2rem;
  font-weight: 600;
  padding: 1.6rem 3.2rem;
  border-radius: 1.5rem; /* for smooth corders */

  /* always put transition in the original/initial state */
  transition: background-color 1s;
}

.btn--full:link,
.btn--full:visited {
  background-color: #e67e22;
  color: #fff;
}

.btn--full:hover,
.btn--full:active {
  background-color: #cf711f;
}

.btn--outline:link,
.btn--outline:visited {
  background-color: #fff;
  color: #555;
}

.btn--outline:hover,
.btn--outline:active {
  background-color: #fdf2e9;

  /* because of the above background color, when we hover the link, it disappears */
  /* to prevent that, we have added borders */
  /* border: 3px solid #fff; */
  /* but when add borders the layout gets disturbed*/

  /* now to create the same effect as border, we will use shadow
  inset means inside
  first 0 means we don't want to spread it in the horizontal direction
  second 0 means we don't want to spread it in the vertical direction
  third 0 means we don't want to blur the shadow
  3px means we want shadow to be of 3px
  */
  box-shadow: inset 0 0 0 3px #ffff;
}

.margin-right-sm {
  margin-right: 1.6rem !important;
}

.delivered-meals {
  display: flex;
  align-items: center;
  gap: 1.6rem;
}

.delivered-imgs {
  display: flex;
}

/* to make the images round*/
.delivered-imgs img {
  height: 6.4rem;
  width: 6.4rem;
  border-radius: 50%;
}

/* we want images to overlap each other but no the last one
the last one will pull the element to its right, that's why we have removed it
*/
.delivered-imgs img:not(:last-child) {
  margin-right: -1.6rem;
}

.delivery-record {
  font-size: 2rem;
  font-weight: 600;
}

.total-delivered {
  color: #cf711f;
  font-weight: 700;
}
